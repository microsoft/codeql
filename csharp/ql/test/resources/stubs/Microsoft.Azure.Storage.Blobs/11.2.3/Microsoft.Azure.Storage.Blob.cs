// This file contains auto-generated code.
// Generated from `Microsoft.Azure.Storage.Blob, Version=11.2.3.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35`.
namespace Microsoft
{
    namespace Azure
    {
        namespace Storage
        {
            namespace Blob
            {
                public abstract class BatchOperation
                {
                    protected BatchOperation() => throw null;
                }
                public static partial class BlobAccountExtensions
                {
                    public static Microsoft.Azure.Storage.Blob.CloudBlobClient CreateCloudBlobClient(this Microsoft.Azure.Storage.CloudStorageAccount account) => throw null;
                }
                public class BlobBatchException : Microsoft.Azure.Storage.StorageException
                {
                    public System.Collections.Generic.IList<Microsoft.Azure.Storage.Blob.BlobBatchSubOperationError> ErrorResponses { get => throw null; }
                    public System.Collections.Generic.IList<Microsoft.Azure.Storage.Blob.BlobBatchSubOperationResponse> SuccessfulResponses { get => throw null; }
                }
                public sealed class BlobBatchSubOperationError
                {
                    public string ErrorCode { get => throw null; }
                    public Microsoft.Azure.Storage.StorageExtendedErrorInformation ExtendedErrorInformation { get => throw null; }
                    public int OperationIndex { get => throw null; }
                    public System.Net.HttpStatusCode StatusCode { get => throw null; }
                }
                public sealed class BlobBatchSubOperationResponse
                {
                    public System.Collections.Generic.Dictionary<string, string> Headers { get => throw null; }
                    public int OperationIndex { get => throw null; }
                    public System.Net.HttpStatusCode StatusCode { get => throw null; }
                }
                public class BlobContainerEncryptionScopeOptions
                {
                    public BlobContainerEncryptionScopeOptions() => throw null;
                    public string DefaultEncryptionScope { get => throw null; set { } }
                    public bool PreventEncryptionScopeOverride { get => throw null; set { } }
                }
                public sealed class BlobContainerPermissions
                {
                    public BlobContainerPermissions() => throw null;
                    public Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType PublicAccess { get => throw null; set { } }
                    public Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicies SharedAccessPolicies { get => throw null; }
                }
                public sealed class BlobContainerProperties
                {
                    public BlobContainerProperties() => throw null;
                    public Microsoft.Azure.Storage.Blob.BlobContainerEncryptionScopeOptions EncryptionScopeOptions { get => throw null; }
                    public string ETag { get => throw null; }
                    public bool? HasImmutabilityPolicy { get => throw null; }
                    public bool? HasLegalHold { get => throw null; }
                    public System.DateTimeOffset? LastModified { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.LeaseDuration LeaseDuration { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.LeaseState LeaseState { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.LeaseStatus LeaseStatus { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType? PublicAccess { get => throw null; }
                }
                public enum BlobContainerPublicAccessType
                {
                    Off = 0,
                    Container = 1,
                    Blob = 2,
                    Unknown = 3,
                }
                public sealed class BlobContinuationToken : Microsoft.Azure.Storage.IContinuationToken
                {
                    public BlobContinuationToken() => throw null;
                    public System.Xml.Schema.XmlSchema GetSchema() => throw null;
                    public string NextMarker { get => throw null; set { } }
                    public System.Threading.Tasks.Task ReadXmlAsync(System.Xml.XmlReader reader) => throw null;
                    public Microsoft.Azure.Storage.StorageLocation? TargetLocation { get => throw null; set { } }
                    public void WriteXml(System.Xml.XmlWriter writer) => throw null;
                }
                public sealed class BlobCustomerProvidedKey
                {
                    public BlobCustomerProvidedKey(string key) => throw null;
                    public BlobCustomerProvidedKey(byte[] key) => throw null;
                    public string EncryptionAlgorithm { get => throw null; }
                    public string Key { get => throw null; }
                    public string KeySHA256 { get => throw null; }
                }
                public sealed class BlobDeleteBatchOperation : Microsoft.Azure.Storage.Blob.BatchOperation
                {
                    public void AddSubOperation(Microsoft.Azure.Storage.Blob.CloudBlob blob, Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption = default(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions blobRequestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions)) => throw null;
                    public BlobDeleteBatchOperation() => throw null;
                }
                // public sealed class BlobEncryptionPolicy
                // {
                //     public BlobEncryptionPolicy(Microsoft.Azure.KeyVault.Core.IKey key, Microsoft.Azure.KeyVault.Core.IKeyResolver keyResolver) => throw null;
                //     public Microsoft.Azure.KeyVault.Core.IKey Key { get => throw null; }
                //     public Microsoft.Azure.KeyVault.Core.IKeyResolver KeyResolver { get => throw null; }
                // }
                [System.Flags]
                public enum BlobListingDetails
                {
                    None = 0,
                    Snapshots = 1,
                    Metadata = 2,
                    UncommittedBlobs = 4,
                    Copy = 8,
                    Deleted = 16,
                    All = 31,
                }
                public sealed class BlobProperties
                {
                    public int? AppendBlobCommittedBlockCount { get => throw null; }
                    public bool? BlobTierInferred { get => throw null; }
                    public System.DateTimeOffset? BlobTierLastModifiedTime { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.BlobType BlobType { get => throw null; }
                    public string CacheControl { get => throw null; set { } }
                    public string ContentDisposition { get => throw null; set { } }
                    public string ContentEncoding { get => throw null; set { } }
                    public string ContentLanguage { get => throw null; set { } }
                    public string ContentMD5 { get => throw null; set { } }
                    public string ContentType { get => throw null; set { } }
                    public System.DateTimeOffset? Created { get => throw null; }
                    public BlobProperties() => throw null;
                    public BlobProperties(Microsoft.Azure.Storage.Blob.BlobProperties other) => throw null;
                    public System.DateTimeOffset? DeletedTime { get => throw null; }
                    public string EncryptionScope { get => throw null; }
                    public string ETag { get => throw null; }
                    public bool IsIncrementalCopy { get => throw null; }
                    public bool IsServerEncrypted { get => throw null; }
                    public System.DateTimeOffset? LastModified { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.LeaseDuration LeaseDuration { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.LeaseState LeaseState { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.LeaseStatus LeaseStatus { get => throw null; }
                    public long Length { get => throw null; }
                    public long? PageBlobSequenceNumber { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? PremiumPageBlobTier { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.RehydrationStatus? RehydrationStatus { get => throw null; }
                    public int? RemainingDaysBeforePermanentDelete { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.StandardBlobTier? StandardBlobTier { get => throw null; }
                }
                public sealed class BlobRequestOptions : Microsoft.Azure.Storage.IRequestOptions
                {
                    public bool? AbsorbConditionalErrorsOnRetry { get => throw null; set { } }
                    public Microsoft.Azure.Storage.Shared.Protocol.ChecksumOptions ChecksumOptions { get => throw null; set { } }
                    public BlobRequestOptions() => throw null;
                    public Microsoft.Azure.Storage.Blob.BlobCustomerProvidedKey CustomerProvidedKey { get => throw null; set { } }
                    public bool? DisableContentMD5Validation { get => throw null; set { } }
                    // public Microsoft.Azure.Storage.Blob.BlobEncryptionPolicy EncryptionPolicy { get => throw null; set { } }
                    public string EncryptionScope { get => throw null; set { } }
                    public Microsoft.Azure.Storage.RetryPolicies.LocationMode? LocationMode { get => throw null; set { } }
                    public System.TimeSpan? MaximumExecutionTime { get => throw null; set { } }
                    public System.TimeSpan? NetworkTimeout { get => throw null; set { } }
                    public int? ParallelOperationThreadCount { get => throw null; set { } }
                    public bool? RequireEncryption { get => throw null; set { } }
                    public Microsoft.Azure.Storage.RetryPolicies.IRetryPolicy RetryPolicy { get => throw null; set { } }
                    public System.TimeSpan? ServerTimeout { get => throw null; set { } }
                    public long? SingleBlobUploadThresholdInBytes { get => throw null; set { } }
                    public bool? StoreBlobContentMD5 { get => throw null; set { } }
                    public bool? UseTransactionalMD5 { get => throw null; set { } }
                }
                public class BlobResultSegment
                {
                    public Microsoft.Azure.Storage.Blob.BlobContinuationToken ContinuationToken { get => throw null; }
                    public BlobResultSegment(System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.IListBlobItem> blobs, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken) => throw null;
                    public System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.IListBlobItem> Results { get => throw null; }
                }
                public sealed class BlobSetTierBatchOperation : Microsoft.Azure.Storage.Blob.BatchOperation
                {
                    public void AddSubOperation(Microsoft.Azure.Storage.Blob.CloudBlockBlob blockBlob, Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions blobRequestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions)) => throw null;
                    public void AddSubOperation(Microsoft.Azure.Storage.Blob.CloudPageBlob pageBlob, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions blobRequestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions)) => throw null;
                    public BlobSetTierBatchOperation() => throw null;
                }
                public enum BlobType
                {
                    Unspecified = 0,
                    PageBlob = 1,
                    BlockBlob = 2,
                    AppendBlob = 3,
                }
                public enum BlockListingFilter
                {
                    Committed = 0,
                    Uncommitted = 1,
                    All = 2,
                }
                public enum BlockSearchMode
                {
                    Committed = 0,
                    Uncommitted = 1,
                    Latest = 2,
                }
                public class CloudAppendBlob : Microsoft.Azure.Storage.Blob.CloudBlob, Microsoft.Azure.Storage.Blob.ICloudBlob, Microsoft.Azure.Storage.Blob.IListBlobItem
                {
                    public virtual long AppendBlock(System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum = default(Microsoft.Azure.Storage.Shared.Protocol.Checksum), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual long AppendBlock(System.Uri sourceUri, long offset, long count, Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<long> AppendBlockAsync(System.IO.Stream blockData, string contentMD5 = default(string)) => throw null;
                    public virtual System.Threading.Tasks.Task<long> AppendBlockAsync(System.IO.Stream blockData, string contentMD5, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<long> AppendBlockAsync(System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<long> AppendBlockAsync(System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<long> AppendBlockAsync(System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<long> AppendBlockAsync(System.Uri sourceUri, long offset, long count, string sourceContentMd5, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void AppendFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync(byte[] buffer, int index, int count) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync(byte[] buffer, int index, int count, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void AppendFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromFileAsync(string path) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromFileAsync(string path, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void AppendFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void AppendFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, long length) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, long length, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void AppendText(string content, System.Text.Encoding encoding = default(System.Text.Encoding), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task AppendTextAsync(string content) => throw null;
                    public virtual System.Threading.Tasks.Task AppendTextAsync(string content, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task AppendTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AppendTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(System.IO.Stream blockData, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendBlock(System.Uri sourceUri, long offset, long count, Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromByteArray(byte[] buffer, int index, int count, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile(string path, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(System.IO.Stream source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(System.IO.Stream source, long length, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendText(string content, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAppendText(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateOrReplace(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateOrReplace(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(bool createNew, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudAppendBlob source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText(string content, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual void CreateOrReplace(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task CreateOrReplaceAsync() => throw null;
                    public virtual System.Threading.Tasks.Task CreateOrReplaceAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task CreateOrReplaceAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task CreateOrReplaceAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob CreateSnapshot(System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudAppendBlob> CreateSnapshotAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudAppendBlob> CreateSnapshotAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudAppendBlob> CreateSnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudAppendBlob> CreateSnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public CloudAppendBlob(System.Uri blobAbsoluteUri) : base(default(System.Uri)) => throw null;
                    public CloudAppendBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudAppendBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public CloudAppendBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudAppendBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public CloudAppendBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudAppendBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public virtual string DownloadText(System.Text.Encoding encoding = default(System.Text.Encoding), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual long EndAppendBlock(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndAppendFromByteArray(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndAppendFromFile(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndAppendFromStream(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndAppendText(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndCreateOrReplace(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob EndCreateSnapshot(System.IAsyncResult asyncResult) => throw null;
                    public virtual string EndDownloadText(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream EndOpenWrite(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromByteArray(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromFile(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromStream(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadText(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream OpenWrite(bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(bool createNew) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(bool createNew, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string StartCopy(Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob source) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudAppendBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public int StreamWriteSizeInBytes { get => throw null; set { } }
                    public virtual void UploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public System.Threading.Tasks.Task UploadFromStreamAsyncHelper(System.IO.Stream source, long? length, bool createNew, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadText(string content, System.Text.Encoding encoding = default(System.Text.Encoding), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                }
                public class CloudBlob : Microsoft.Azure.Storage.Blob.IListBlobItem
                {
                    public virtual void AbortCopy(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task AbortCopyAsync(string copyId) => throw null;
                    public virtual System.Threading.Tasks.Task AbortCopyAsync(string copyId, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task AbortCopyAsync(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task AbortCopyAsync(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string AcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId = default(string)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAbortCopy(string copyId, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAbortCopy(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginBreakLease(System.TimeSpan? breakPeriod, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginBreakLease(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDelete(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDelete(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDeleteIfExists(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDeleteIfExists(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToByteArray(byte[] target, int index, long? blobOffset, long? length, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToByteArray(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToStream(System.IO.Stream target, long? offset, long? length, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToStream(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToByteArray(byte[] target, int index, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToByteArray(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToFile(string path, System.IO.FileMode mode, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToFile(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToStream(System.IO.Stream target, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToStream(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginExists(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginExists(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginFetchAttributes(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginFetchAttributes(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenRead(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenRead(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginRenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginRenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginRotateEncryptionKey(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginRotateEncryptionKey(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetMetadata(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetMetadata(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetProperties(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetProperties(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSnapshot(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSnapshot(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(System.Uri source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(System.Uri source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUndelete(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUndelete(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public Microsoft.Azure.Storage.Blob.BlobType BlobType { get => throw null; }
                    public virtual System.TimeSpan BreakLease(System.TimeSpan? breakPeriod = default(System.TimeSpan?), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string ChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.Blob.CloudBlobContainer Container { get => throw null; }
                    public virtual Microsoft.Azure.Storage.Blob.CopyState CopyState { get => throw null; }
                    public CloudBlob(System.Uri blobAbsoluteUri) => throw null;
                    public CloudBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) => throw null;
                    public CloudBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Blob.CloudBlobClient client) => throw null;
                    public CloudBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) => throw null;
                    public CloudBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) => throw null;
                    public CloudBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) => throw null;
                    public CloudBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) => throw null;
                    public virtual void Delete(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption = default(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync() => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual bool DeleteIfExists(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption = default(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual int DownloadRangeToByteArray(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void DownloadRangeToStream(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual int DownloadToByteArray(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void DownloadToFile(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileParallelAsync(string path, System.IO.FileMode mode, int parallelIOCount, long? rangeSizeInBytes) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileParallelAsync(string path, System.IO.FileMode mode, int parallelIOCount, long? rangeSizeInBytes, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToFileParallelAsync(string path, System.IO.FileMode mode, int parallelIOCount, long? rangeSizeInBytes, long offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void DownloadToStream(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void EndAbortCopy(System.IAsyncResult asyncResult) => throw null;
                    public virtual string EndAcquireLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual System.TimeSpan EndBreakLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual string EndChangeLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndDelete(System.IAsyncResult asyncResult) => throw null;
                    public virtual bool EndDeleteIfExists(System.IAsyncResult asyncResult) => throw null;
                    public virtual int EndDownloadRangeToByteArray(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndDownloadRangeToStream(System.IAsyncResult asyncResult) => throw null;
                    public virtual int EndDownloadToByteArray(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndDownloadToFile(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndDownloadToStream(System.IAsyncResult asyncResult) => throw null;
                    public virtual bool EndExists(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndFetchAttributes(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.AccountProperties EndGetAccountProperties(System.IAsyncResult asyncResult) => throw null;
                    public virtual System.IO.Stream EndOpenRead(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndReleaseLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndRenewLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndRotateEncryptionKey(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetMetadata(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetProperties(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlob EndSnapshot(System.IAsyncResult asyncResult) => throw null;
                    public virtual string EndStartCopy(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUndelete(System.IAsyncResult asyncResult) => throw null;
                    public virtual bool Exists(Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(bool primaryOnly, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void FetchAttributes(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.AccountProperties GetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, string groupPolicyIdentifier) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers, string groupPolicyIdentifier) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers, string groupPolicyIdentifier, Microsoft.Azure.Storage.SharedAccessProtocol? protocols, Microsoft.Azure.Storage.IPAddressOrRange ipAddressOrRange) => throw null;
                    public string GetUserDelegationSharedAccessSignature(Microsoft.Azure.Storage.UserDelegationKey delegationKey, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers = default(Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders), Microsoft.Azure.Storage.SharedAccessProtocol? protocols = default(Microsoft.Azure.Storage.SharedAccessProtocol?), Microsoft.Azure.Storage.IPAddressOrRange ipAddressOrRange = default(Microsoft.Azure.Storage.IPAddressOrRange)) => throw null;
                    public bool IsDeleted { get => throw null; }
                    public bool IsSnapshot { get => throw null; }
                    public System.Collections.Generic.IDictionary<string, string> Metadata { get => throw null; }
                    public virtual string Name { get => throw null; }
                    public virtual System.IO.Stream OpenRead(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.Blob.CloudBlobDirectory Parent { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.BlobProperties Properties { get => throw null; }
                    public virtual void ReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void RenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void RotateEncryptionKey(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task RotateEncryptionKeyAsync() => throw null;
                    public virtual System.Threading.Tasks.Task RotateEncryptionKeyAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task RotateEncryptionKeyAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task RotateEncryptionKeyAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.Blob.CloudBlobClient ServiceClient { get => throw null; }
                    public virtual void SetMetadata(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync() => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void SetProperties(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetPropertiesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task SetPropertiesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetPropertiesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetPropertiesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlob Snapshot(System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlob> SnapshotAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlob> SnapshotAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlob> SnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlob> SnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.StorageUri SnapshotQualifiedStorageUri { get => throw null; }
                    public System.Uri SnapshotQualifiedUri { get => throw null; }
                    public System.DateTimeOffset? SnapshotTime { get => throw null; }
                    public virtual string StartCopy(System.Uri source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(System.Uri source) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(System.Uri source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(System.Uri source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(System.Uri source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(System.Uri source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(System.Uri source, Microsoft.Azure.Storage.Blob.StandardBlobTier? standardBlockBlobTier, Microsoft.Azure.Storage.Blob.RehydratePriority? rehydratePriority, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.StorageUri StorageUri { get => throw null; }
                    public int StreamMinimumReadSizeInBytes { get => throw null; set { } }
                    public virtual void Undelete(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UndeleteAsync() => throw null;
                    public virtual System.Threading.Tasks.Task UndeleteAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UndeleteAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UndeleteAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public System.Uri Uri { get => throw null; }
                }
                public class CloudBlobClient
                {
                    public Microsoft.Azure.Storage.AuthenticationScheme AuthenticationScheme { get => throw null; set { } }
                    public System.Uri BaseUri { get => throw null; }
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetBlobReferenceFromServer(System.Uri blobUri, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetBlobReferenceFromServer(System.Uri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetBlobReferenceFromServer(Microsoft.Azure.Storage.StorageUri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetServiceProperties(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetServiceProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetServiceStats(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetServiceStats(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetUserDelegationKey(System.DateTimeOffset keyStart, System.DateTimeOffset keyEnd, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetUserDelegationKey(System.DateTimeOffset keyStart, System.DateTimeOffset keyEnd, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListBlobsSegmented(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListBlobsSegmented(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListContainersSegmented(Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListContainersSegmented(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListContainersSegmented(string prefix, Microsoft.Azure.Storage.Blob.ContainerListingDetails detailsIncluded, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetServiceProperties(Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties properties, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetServiceProperties(Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties properties, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public Microsoft.Azure.Storage.IBufferManager BufferManager { get => throw null; set { } }
                    public Microsoft.Azure.Storage.Auth.StorageCredentials Credentials { get => throw null; }
                    public CloudBlobClient(System.Uri baseUri, System.Net.Http.DelegatingHandler delegatingHandler = default(System.Net.Http.DelegatingHandler)) => throw null;
                    public CloudBlobClient(System.Uri baseUri, Microsoft.Azure.Storage.Auth.StorageCredentials credentials, System.Net.Http.DelegatingHandler delegatingHandler = default(System.Net.Http.DelegatingHandler)) => throw null;
                    public CloudBlobClient(Microsoft.Azure.Storage.StorageUri storageUri, Microsoft.Azure.Storage.Auth.StorageCredentials credentials, System.Net.Http.DelegatingHandler delegatingHandler = default(System.Net.Http.DelegatingHandler)) => throw null;
                    public string DefaultDelimiter { get => throw null; set { } }
                    public Microsoft.Azure.Storage.Blob.BlobRequestOptions DefaultRequestOptions { get => throw null; set { } }
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.AccountProperties EndGetAccountProperties(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ICloudBlob EndGetBlobReferenceFromServer(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties EndGetServiceProperties(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.ServiceStats EndGetServiceStats(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.UserDelegationKey EndGetUserDelegationKey(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment EndListBlobsSegmented(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ContainerResultSegment EndListContainersSegmented(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetServiceProperties(System.IAsyncResult asyncResult) => throw null;
                    public System.Threading.Tasks.Task<System.Collections.Generic.IList<Microsoft.Azure.Storage.Blob.BlobBatchSubOperationResponse>> ExecuteBatchAsync(Microsoft.Azure.Storage.Blob.BatchOperation batchOperation, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.AccountProperties GetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ICloudBlob GetBlobReferenceFromServer(System.Uri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ICloudBlob GetBlobReferenceFromServer(Microsoft.Azure.Storage.StorageUri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(System.Uri blobUri) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(System.Uri blobUri, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(System.Uri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(System.Uri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(Microsoft.Azure.Storage.StorageUri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(Microsoft.Azure.Storage.StorageUri blobUri, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobContainer GetContainerReference(string containerName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobContainer GetRootContainerReference() => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties GetServiceProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties> GetServicePropertiesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties> GetServicePropertiesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties> GetServicePropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties> GetServicePropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.ServiceStats GetServiceStats(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceStats> GetServiceStatsAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceStats> GetServiceStatsAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceStats> GetServiceStatsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceStats> GetServiceStatsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.UserDelegationKey GetUserDelegationKey(System.DateTimeOffset keyStart, System.DateTimeOffset keyEnd, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.UserDelegationKey> GetUserDelegationKeyAsync(System.DateTimeOffset keyStart, System.DateTimeOffset keyEnd) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.UserDelegationKey> GetUserDelegationKeyAsync(System.DateTimeOffset keyStart, System.DateTimeOffset keyEnd, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.IListBlobItem> ListBlobs(string prefix, bool useFlatBlobListing = default(bool), Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails = default(Microsoft.Azure.Storage.Blob.BlobListingDetails), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment ListBlobsSegmented(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment ListBlobsSegmented(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.CloudBlobContainer> ListContainers(string prefix = default(string), Microsoft.Azure.Storage.Blob.ContainerListingDetails detailsIncluded = default(Microsoft.Azure.Storage.Blob.ContainerListingDetails), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ContainerResultSegment ListContainersSegmented(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ContainerResultSegment ListContainersSegmented(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ContainerResultSegment ListContainersSegmented(string prefix, Microsoft.Azure.Storage.Blob.ContainerListingDetails detailsIncluded, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ContainerResultSegment> ListContainersSegmentedAsync(Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ContainerResultSegment> ListContainersSegmentedAsync(Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ContainerResultSegment> ListContainersSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ContainerResultSegment> ListContainersSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ContainerResultSegment> ListContainersSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.ContainerListingDetails detailsIncluded, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ContainerResultSegment> ListContainersSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.ContainerListingDetails detailsIncluded, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.RetryPolicies.IRetryPolicy RetryPolicy { get => throw null; set { } }
                    public virtual void SetServiceProperties(Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties properties, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetServicePropertiesAsync(Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties properties) => throw null;
                    public virtual System.Threading.Tasks.Task SetServicePropertiesAsync(Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties properties, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetServicePropertiesAsync(Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties properties, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetServicePropertiesAsync(Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties properties, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.StorageUri StorageUri { get => throw null; }
                }
                public class CloudBlobContainer
                {
                    public virtual string AcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId = default(string)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginAcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginBreakLease(System.TimeSpan? breakPeriod, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginBreakLease(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreate(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreate(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreate(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreate(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobContainerEncryptionScopeOptions encryptionScopeOptions, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateIfNotExists(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateIfNotExists(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateIfNotExists(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateIfNotExists(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobContainerEncryptionScopeOptions encryptionScopeOptions, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDelete(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDelete(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDeleteIfExists(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDeleteIfExists(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginExists(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginExists(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginFetchAttributes(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginFetchAttributes(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetBlobReferenceFromServer(string blobName, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetBlobReferenceFromServer(string blobName, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetPermissions(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetPermissions(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListBlobsSegmented(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListBlobsSegmented(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListBlobsSegmented(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginRenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginRenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetMetadata(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetMetadata(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetPermissions(Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetPermissions(Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual System.TimeSpan BreakLease(System.TimeSpan? breakPeriod = default(System.TimeSpan?), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string ChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void Create(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void Create(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void Create(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobContainerEncryptionScopeOptions encryptionScopeOptions, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync() => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobContainerEncryptionScopeOptions encryptionScopeOptions, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual bool CreateIfNotExists(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual bool CreateIfNotExists(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual bool CreateIfNotExists(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobContainerEncryptionScopeOptions encryptionScopeOptions, Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> CreateIfNotExistsAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<bool> CreateIfNotExistsAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> CreateIfNotExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> CreateIfNotExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> CreateIfNotExistsAsync(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> CreateIfNotExistsAsync(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> CreateIfNotExistsAsync(Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType accessType, Microsoft.Azure.Storage.Blob.BlobContainerEncryptionScopeOptions encryptionScopeOptions, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public CloudBlobContainer(System.Uri containerAddress) => throw null;
                    public CloudBlobContainer(System.Uri containerAddress, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) => throw null;
                    public CloudBlobContainer(Microsoft.Azure.Storage.StorageUri containerAddress, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) => throw null;
                    public virtual void Delete(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync() => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task DeleteAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual bool DeleteIfExists(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string EndAcquireLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual System.TimeSpan EndBreakLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual string EndChangeLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndCreate(System.IAsyncResult asyncResult) => throw null;
                    public virtual bool EndCreateIfNotExists(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndDelete(System.IAsyncResult asyncResult) => throw null;
                    public virtual bool EndDeleteIfExists(System.IAsyncResult asyncResult) => throw null;
                    public virtual bool EndExists(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndFetchAttributes(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.AccountProperties EndGetAccountProperties(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ICloudBlob EndGetBlobReferenceFromServer(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobContainerPermissions EndGetPermissions(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment EndListBlobsSegmented(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndReleaseLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndRenewLease(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetMetadata(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetPermissions(System.IAsyncResult asyncResult) => throw null;
                    public virtual bool Exists(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<bool> ExistsAsync(bool primaryOnly, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void FetchAttributes(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Shared.Protocol.AccountProperties GetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob GetAppendBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob GetAppendBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlob GetBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlob GetBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.ICloudBlob GetBlobReferenceFromServer(string blobName, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(string blobName) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(string blobName, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(string blobName, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.ICloudBlob> GetBlobReferenceFromServerAsync(string blobName, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlockBlob GetBlockBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlockBlob GetBlockBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobDirectory GetDirectoryReference(string relativeAddress) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudPageBlob GetPageBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudPageBlob GetPageBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobContainerPermissions GetPermissions(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobContainerPermissions> GetPermissionsAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobContainerPermissions> GetPermissionsAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobContainerPermissions> GetPermissionsAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobContainerPermissions> GetPermissionsAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, string groupPolicyIdentifier) => throw null;
                    public string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, string groupPolicyIdentifier, Microsoft.Azure.Storage.SharedAccessProtocol? protocols, Microsoft.Azure.Storage.IPAddressOrRange ipAddressOrRange) => throw null;
                    public string GetUserDelegationSharedAccessSignature(Microsoft.Azure.Storage.UserDelegationKey delegationKey, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers = default(Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders), Microsoft.Azure.Storage.SharedAccessProtocol? protocols = default(Microsoft.Azure.Storage.SharedAccessProtocol?), Microsoft.Azure.Storage.IPAddressOrRange ipAddressOrRange = default(Microsoft.Azure.Storage.IPAddressOrRange)) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.IListBlobItem> ListBlobs(string prefix = default(string), bool useFlatBlobListing = default(bool), Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails = default(Microsoft.Azure.Storage.Blob.BlobListingDetails), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment ListBlobsSegmented(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment ListBlobsSegmented(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment ListBlobsSegmented(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(string prefix, bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public System.Collections.Generic.IDictionary<string, string> Metadata { get => throw null; }
                    public string Name { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.BlobContainerProperties Properties { get => throw null; }
                    public virtual void ReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void RenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.Blob.CloudBlobClient ServiceClient { get => throw null; }
                    public virtual void SetMetadata(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync() => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetMetadataAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void SetPermissions(Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetPermissionsAsync(Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions) => throw null;
                    public virtual System.Threading.Tasks.Task SetPermissionsAsync(Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetPermissionsAsync(Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetPermissionsAsync(Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.StorageUri StorageUri { get => throw null; }
                    public System.Uri Uri { get => throw null; }
                }
                public class CloudBlobDirectory : Microsoft.Azure.Storage.Blob.IListBlobItem
                {
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListBlobsSegmented(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginListBlobsSegmented(bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public Microsoft.Azure.Storage.Blob.CloudBlobContainer Container { get => throw null; }
                    public CloudBlobDirectory() => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment EndListBlobsSegmented(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob GetAppendBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudAppendBlob GetAppendBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlob GetBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlob GetBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlockBlob GetBlockBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlockBlob GetBlockBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobDirectory GetDirectoryReference(string itemName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudPageBlob GetPageBlobReference(string blobName) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudPageBlob GetPageBlobReference(string blobName, System.DateTimeOffset? snapshotTime) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.IListBlobItem> ListBlobs(bool useFlatBlobListing = default(bool), Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails = default(Microsoft.Azure.Storage.Blob.BlobListingDetails), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment ListBlobsSegmented(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.BlobResultSegment ListBlobsSegmented(bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.BlobResultSegment> ListBlobsSegmentedAsync(bool useFlatBlobListing, Microsoft.Azure.Storage.Blob.BlobListingDetails blobListingDetails, int? maxResults, Microsoft.Azure.Storage.Blob.BlobContinuationToken currentToken, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public Microsoft.Azure.Storage.Blob.CloudBlobDirectory Parent { get => throw null; }
                    public string Prefix { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.CloudBlobClient ServiceClient { get => throw null; }
                    public Microsoft.Azure.Storage.StorageUri StorageUri { get => throw null; }
                    public System.Uri Uri { get => throw null; }
                }
                public abstract class CloudBlobStream : System.IO.Stream
                {
                    public abstract Microsoft.Azure.Storage.ICancellableAsyncResult BeginCommit(System.AsyncCallback callback, object state);
                    public abstract Microsoft.Azure.Storage.ICancellableAsyncResult BeginFlush(System.AsyncCallback callback, object state);
                    public abstract void Commit();
                    public abstract System.Threading.Tasks.Task CommitAsync();
                    protected CloudBlobStream() => throw null;
                    public abstract void EndCommit(System.IAsyncResult asyncResult);
                    public abstract void EndFlush(System.IAsyncResult asyncResult);
                }
                public class CloudBlockBlob : Microsoft.Azure.Storage.Blob.CloudBlob, Microsoft.Azure.Storage.Blob.ICloudBlob, Microsoft.Azure.Storage.Blob.IListBlobItem
                {
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadBlockList(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadBlockList(Microsoft.Azure.Storage.Blob.BlockListingFilter blockListingFilter, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadText(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginPutBlock(string blockId, System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginPutBlock(string blockId, System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginPutBlock(string blockId, System.Uri sourceUri, long? offset, long? count, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginPutBlockList(System.Collections.Generic.IEnumerable<string> blockList, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginPutBlockList(System.Collections.Generic.IEnumerable<string> blockList, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetStandardBlobTier(Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetStandardBlobTier(Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, Microsoft.Azure.Storage.Blob.StandardBlobTier? standardBlockBlobTier, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText(string content, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadText(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlockBlob CreateSnapshot(System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlockBlob> CreateSnapshotAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlockBlob> CreateSnapshotAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlockBlob> CreateSnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlockBlob> CreateSnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public CloudBlockBlob(System.Uri blobAbsoluteUri) : base(default(System.Uri)) => throw null;
                    public CloudBlockBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudBlockBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public CloudBlockBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudBlockBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public CloudBlockBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudBlockBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.ListBlockItem> DownloadBlockList(Microsoft.Azure.Storage.Blob.BlockListingFilter blockListingFilter = default(Microsoft.Azure.Storage.Blob.BlockListingFilter), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.ListBlockItem>> DownloadBlockListAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.ListBlockItem>> DownloadBlockListAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.ListBlockItem>> DownloadBlockListAsync(Microsoft.Azure.Storage.Blob.BlockListingFilter blockListingFilter, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.ListBlockItem>> DownloadBlockListAsync(Microsoft.Azure.Storage.Blob.BlockListingFilter blockListingFilter, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string DownloadText(System.Text.Encoding encoding = default(System.Text.Encoding), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> DownloadTextAsync(System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlockBlob EndCreateSnapshot(System.IAsyncResult asyncResult) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.ListBlockItem> EndDownloadBlockList(System.IAsyncResult asyncResult) => throw null;
                    public virtual string EndDownloadText(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream EndOpenWrite(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndPutBlock(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndPutBlockList(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetStandardBlobTier(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromByteArray(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromFile(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromStream(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadText(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream OpenWrite(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void PutBlock(string blockId, System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void PutBlock(string blockId, System.Uri sourceUri, long? offset, long? count, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void PutBlock(string blockId, System.Uri sourceUri, long? offset, long? count, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, string contentMD5) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum = default(Microsoft.Azure.Storage.Shared.Protocol.Checksum)) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, string contentMD5) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum = default(Microsoft.Azure.Storage.Shared.Protocol.Checksum)) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, string contentMD5, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, string contentMD5, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.Uri sourceUri, long? offset, long? count, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, string contentMD5, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockAsync(string blockId, System.IO.Stream blockData, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void PutBlockList(System.Collections.Generic.IEnumerable<string> blockList, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockListAsync(System.Collections.Generic.IEnumerable<string> blockList) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockListAsync(System.Collections.Generic.IEnumerable<string> blockList, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockListAsync(System.Collections.Generic.IEnumerable<string> blockList, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task PutBlockListAsync(System.Collections.Generic.IEnumerable<string> blockList, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void SetStandardBlobTier(Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier, Microsoft.Azure.Storage.Blob.RehydratePriority? rehydratePriority = default(Microsoft.Azure.Storage.Blob.RehydratePriority?), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetStandardBlobTierAsync(Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier) => throw null;
                    public virtual System.Threading.Tasks.Task SetStandardBlobTierAsync(Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetStandardBlobTierAsync(Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetStandardBlobTierAsync(Microsoft.Azure.Storage.Blob.StandardBlobTier standardBlobTier, Microsoft.Azure.Storage.Blob.RehydratePriority? rehydratePriority, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string StartCopy(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, Microsoft.Azure.Storage.Blob.StandardBlobTier? standardBlockBlobTier = default(Microsoft.Azure.Storage.Blob.StandardBlobTier?), Microsoft.Azure.Storage.Blob.RehydratePriority? rehydratePriority = default(Microsoft.Azure.Storage.Blob.RehydratePriority?), Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public string StartCopy(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, bool syncCopy, Microsoft.Azure.Storage.Blob.StandardBlobTier? standardBlockBlobTier, Microsoft.Azure.Storage.Blob.RehydratePriority? rehydratePriority, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudBlockBlob source) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, Microsoft.Azure.Storage.Blob.StandardBlobTier? standardBlockBlobTier, Microsoft.Azure.Storage.Blob.RehydratePriority? rehydratePriority, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudBlockBlob source, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, bool incrementalCopy, bool syncCopy, Microsoft.Azure.Storage.Blob.StandardBlobTier? standardBlockBlobTier, Microsoft.Azure.Storage.Blob.RehydratePriority? rehydratePriority, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public int StreamWriteSizeInBytes { get => throw null; set { } }
                    public virtual void UploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadText(string content, System.Text.Encoding encoding = default(System.Text.Encoding), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadTextAsync(string content, System.Text.Encoding encoding, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                }
                public class CloudPageBlob : Microsoft.Azure.Storage.Blob.CloudBlob, Microsoft.Azure.Storage.Blob.ICloudBlob, Microsoft.Azure.Storage.Blob.IListBlobItem
                {
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginClearPages(long startOffset, long length, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginClearPages(long startOffset, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreate(long size, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreate(long size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreate(long size, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginCreateSnapshot(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetPageRanges(System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetPageRanges(long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetPageRangesDiff(System.DateTimeOffset previousSnapshotTime, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetPageRangesDiff(System.DateTimeOffset previousSnapshotTime, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(long? size, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenWrite(long? size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginResize(long size, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginResize(long size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetPremiumBlobTier(Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetPremiumBlobTier(Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetSequenceNumber(Microsoft.Azure.Storage.Blob.SequenceNumberAction sequenceNumberAction, long? sequenceNumber, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetSequenceNumber(Microsoft.Azure.Storage.Blob.SequenceNumberAction sequenceNumberAction, long? sequenceNumber, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartIncrementalCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob sourceSnapshot, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartIncrementalCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob sourceSnapshot, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginStartIncrementalCopy(System.Uri sourceSnapshot, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginWritePages(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginWritePages(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual Microsoft.Azure.Storage.ICancellableAsyncResult BeginWritePages(System.Uri sourceUri, long offset, long count, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state) => throw null;
                    public virtual void ClearPages(long startOffset, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task ClearPagesAsync(long startOffset, long length) => throw null;
                    public virtual System.Threading.Tasks.Task ClearPagesAsync(long startOffset, long length, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task ClearPagesAsync(long startOffset, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task ClearPagesAsync(long startOffset, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void Create(long size, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void Create(long size, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(long size) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(long size, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(long size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(long size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task CreateAsync(long size, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudPageBlob CreateSnapshot(System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudPageBlob> CreateSnapshotAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudPageBlob> CreateSnapshotAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudPageBlob> CreateSnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudPageBlob> CreateSnapshotAsync(System.Collections.Generic.IDictionary<string, string> metadata, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public CloudPageBlob(System.Uri blobAbsoluteUri) : base(default(System.Uri)) => throw null;
                    public CloudPageBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudPageBlob(System.Uri blobAbsoluteUri, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public CloudPageBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudPageBlob(System.Uri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public CloudPageBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Auth.StorageCredentials credentials) : base(default(System.Uri)) => throw null;
                    public CloudPageBlob(Microsoft.Azure.Storage.StorageUri blobAbsoluteUri, System.DateTimeOffset? snapshotTime, Microsoft.Azure.Storage.Blob.CloudBlobClient client) : base(default(System.Uri)) => throw null;
                    public virtual void EndClearPages(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndCreate(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudPageBlob EndCreateSnapshot(System.IAsyncResult asyncResult) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageRange> EndGetPageRanges(System.IAsyncResult asyncResult) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageDiffRange> EndGetPageRangesDiff(System.IAsyncResult asyncResult) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream EndOpenWrite(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndResize(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetPremiumBlobTier(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndSetSequenceNumber(System.IAsyncResult asyncResult) => throw null;
                    public virtual string EndStartIncrementalCopy(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromByteArray(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromFile(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndUploadFromStream(System.IAsyncResult asyncResult) => throw null;
                    public virtual void EndWritePages(System.IAsyncResult asyncResult) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageRange> GetPageRanges(long? offset = default(long?), long? length = default(long?), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageRange>> GetPageRangesAsync() => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageRange>> GetPageRangesAsync(System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageRange>> GetPageRangesAsync(long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageRange>> GetPageRangesAsync(long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageDiffRange> GetPageRangesDiff(System.DateTimeOffset previousSnapshotTime, long? offset = default(long?), long? length = default(long?), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageDiffRange>> GetPageRangesDiffAsync(System.DateTimeOffset previousSnapshotTime) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageDiffRange>> GetPageRangesDiffAsync(System.DateTimeOffset previousSnapshotTime, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageDiffRange>> GetPageRangesDiffAsync(System.DateTimeOffset previousSnapshotTime, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.PageDiffRange>> GetPageRangesDiffAsync(System.DateTimeOffset previousSnapshotTime, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual Microsoft.Azure.Storage.Blob.CloudBlobStream OpenWrite(long? size, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(long? size) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(long? size, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(long? size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(long? size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<Microsoft.Azure.Storage.Blob.CloudBlobStream> OpenWriteAsync(long? size, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void Resize(long size, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task ResizeAsync(long size) => throw null;
                    public virtual System.Threading.Tasks.Task ResizeAsync(long size, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task ResizeAsync(long size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task ResizeAsync(long size, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void SetPremiumBlobTier(Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetPremiumBlobTierAsync(Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier) => throw null;
                    public virtual System.Threading.Tasks.Task SetPremiumBlobTierAsync(Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetPremiumBlobTierAsync(Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetPremiumBlobTierAsync(Microsoft.Azure.Storage.Blob.PremiumPageBlobTier premiumPageBlobTier, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void SetSequenceNumber(Microsoft.Azure.Storage.Blob.SequenceNumberAction sequenceNumberAction, long? sequenceNumber, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task SetSequenceNumberAsync(Microsoft.Azure.Storage.Blob.SequenceNumberAction sequenceNumberAction, long? sequenceNumber) => throw null;
                    public virtual System.Threading.Tasks.Task SetSequenceNumberAsync(Microsoft.Azure.Storage.Blob.SequenceNumberAction sequenceNumberAction, long? sequenceNumber, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task SetSequenceNumberAsync(Microsoft.Azure.Storage.Blob.SequenceNumberAction sequenceNumberAction, long? sequenceNumber, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task SetSequenceNumberAsync(Microsoft.Azure.Storage.Blob.SequenceNumberAction sequenceNumberAction, long? sequenceNumber, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string StartCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual string StartCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob source) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob source, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual string StartIncrementalCopy(Microsoft.Azure.Storage.Blob.CloudPageBlob sourceSnapshot, Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual string StartIncrementalCopy(System.Uri sourceSnapshotUri, Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartIncrementalCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob source) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartIncrementalCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartIncrementalCopyAsync(Microsoft.Azure.Storage.Blob.CloudPageBlob sourceSnapshot, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task<string> StartIncrementalCopyAsync(System.Uri sourceSnapshotUri, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public int StreamWriteSizeInBytes { get => throw null; set { } }
                    public virtual void UploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void UploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void UploadFromFile(string path, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void UploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.Blob.PremiumPageBlobTier? premiumPageBlobTier, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual void WritePages(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum = default(Microsoft.Azure.Storage.Shared.Protocol.Checksum), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual void WritePages(System.Uri sourceUri, long offset, long count, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum = default(Microsoft.Azure.Storage.Shared.Protocol.Checksum), Microsoft.Azure.Storage.AccessCondition sourceAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.AccessCondition destAccessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext)) => throw null;
                    public virtual System.Threading.Tasks.Task WritePagesAsync(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum) => throw null;
                    public virtual System.Threading.Tasks.Task WritePagesAsync(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task WritePagesAsync(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext) => throw null;
                    public virtual System.Threading.Tasks.Task WritePagesAsync(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task WritePagesAsync(System.IO.Stream pageData, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum contentChecksum, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.IProgress<Microsoft.Azure.Storage.Core.Util.StorageProgress> progressHandler, System.Threading.CancellationToken cancellationToken) => throw null;
                    public virtual System.Threading.Tasks.Task WritePagesAsync(System.Uri sourceUri, long offset, long count, long startOffset, Microsoft.Azure.Storage.Shared.Protocol.Checksum sourceContentChecksum, Microsoft.Azure.Storage.AccessCondition sourceAccessCondition, Microsoft.Azure.Storage.AccessCondition destAccessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken) => throw null;
                }
                [System.Flags]
                public enum ContainerListingDetails
                {
                    None = 0,
                    Metadata = 1,
                    All = 1,
                }
                public class ContainerResultSegment
                {
                    public Microsoft.Azure.Storage.Blob.BlobContinuationToken ContinuationToken { get => throw null; }
                    public ContainerResultSegment(System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.CloudBlobContainer> containers, Microsoft.Azure.Storage.Blob.BlobContinuationToken continuationToken) => throw null;
                    public System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.CloudBlobContainer> Results { get => throw null; }
                }
                public sealed class CopyState
                {
                    public long? BytesCopied { get => throw null; }
                    public System.DateTimeOffset? CompletionTime { get => throw null; }
                    public string CopyId { get => throw null; }
                    public CopyState() => throw null;
                    public System.DateTimeOffset? DestinationSnapshotTime { get => throw null; }
                    public System.Uri Source { get => throw null; }
                    public Microsoft.Azure.Storage.Blob.CopyStatus Status { get => throw null; }
                    public string StatusDescription { get => throw null; }
                    public long? TotalBytes { get => throw null; }
                }
                public enum CopyStatus
                {
                    Invalid = 0,
                    Pending = 1,
                    Success = 2,
                    Aborted = 3,
                    Failed = 4,
                }
                public enum DeleteSnapshotsOption
                {
                    None = 0,
                    IncludeSnapshots = 1,
                    DeleteSnapshotsOnly = 2,
                }
                public interface ICloudBlob : Microsoft.Azure.Storage.Blob.IListBlobItem
                {
                    void AbortCopy(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task AbortCopyAsync(string copyId);
                    System.Threading.Tasks.Task AbortCopyAsync(string copyId, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task AbortCopyAsync(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task AbortCopyAsync(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    string AcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId = default(string));
                    System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<string> AcquireLeaseAsync(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginAbortCopy(string copyId, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginAbortCopy(string copyId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginAcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginAcquireLease(System.TimeSpan? leaseTime, string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginBreakLease(System.TimeSpan? breakPeriod, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginBreakLease(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDelete(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDelete(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDeleteIfExists(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDeleteIfExists(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToByteArray(byte[] target, int index, long? blobOffset, long? length, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToByteArray(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToStream(System.IO.Stream target, long? offset, long? length, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadRangeToStream(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToByteArray(byte[] target, int index, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToByteArray(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToFile(string path, System.IO.FileMode mode, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToFile(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToStream(System.IO.Stream target, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginDownloadToStream(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginExists(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginExists(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginFetchAttributes(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginFetchAttributes(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginGetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenRead(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginOpenRead(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginRenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginRenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetMetadata(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetMetadata(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetProperties(System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginSetProperties(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.ICancellableAsyncResult BeginUploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.AsyncCallback callback, object state);
                    Microsoft.Azure.Storage.Blob.BlobType BlobType { get; }
                    System.TimeSpan BreakLease(System.TimeSpan? breakPeriod = default(System.TimeSpan?), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod);
                    System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<System.TimeSpan> BreakLeaseAsync(System.TimeSpan? breakPeriod, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    string ChangeLease(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition);
                    System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<string> ChangeLeaseAsync(string proposedLeaseId, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    Microsoft.Azure.Storage.Blob.CopyState CopyState { get; }
                    void Delete(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption = default(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task DeleteAsync();
                    System.Threading.Tasks.Task DeleteAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task DeleteAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task DeleteAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    bool DeleteIfExists(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption = default(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption), Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<bool> DeleteIfExistsAsync();
                    System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<bool> DeleteIfExistsAsync(Microsoft.Azure.Storage.Blob.DeleteSnapshotsOption deleteSnapshotsOption, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    int DownloadRangeToByteArray(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length);
                    System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<int> DownloadRangeToByteArrayAsync(byte[] target, int index, long? blobOffset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void DownloadRangeToStream(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length);
                    System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task DownloadRangeToStreamAsync(System.IO.Stream target, long? offset, long? length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    int DownloadToByteArray(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index);
                    System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<int> DownloadToByteArrayAsync(byte[] target, int index, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void DownloadToFile(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode);
                    System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task DownloadToFileAsync(string path, System.IO.FileMode mode, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void DownloadToStream(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target);
                    System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task DownloadToStreamAsync(System.IO.Stream target, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void EndAbortCopy(System.IAsyncResult asyncResult);
                    string EndAcquireLease(System.IAsyncResult asyncResult);
                    System.TimeSpan EndBreakLease(System.IAsyncResult asyncResult);
                    string EndChangeLease(System.IAsyncResult asyncResult);
                    void EndDelete(System.IAsyncResult asyncResult);
                    bool EndDeleteIfExists(System.IAsyncResult asyncResult);
                    int EndDownloadRangeToByteArray(System.IAsyncResult asyncResult);
                    void EndDownloadRangeToStream(System.IAsyncResult asyncResult);
                    int EndDownloadToByteArray(System.IAsyncResult asyncResult);
                    void EndDownloadToFile(System.IAsyncResult asyncResult);
                    void EndDownloadToStream(System.IAsyncResult asyncResult);
                    bool EndExists(System.IAsyncResult asyncResult);
                    void EndFetchAttributes(System.IAsyncResult asyncResult);
                    Microsoft.Azure.Storage.Shared.Protocol.AccountProperties EndGetAccountProperties(System.IAsyncResult asyncResult);
                    System.IO.Stream EndOpenRead(System.IAsyncResult asyncResult);
                    void EndReleaseLease(System.IAsyncResult asyncResult);
                    void EndRenewLease(System.IAsyncResult asyncResult);
                    void EndSetMetadata(System.IAsyncResult asyncResult);
                    void EndSetProperties(System.IAsyncResult asyncResult);
                    void EndUploadFromByteArray(System.IAsyncResult asyncResult);
                    void EndUploadFromFile(System.IAsyncResult asyncResult);
                    void EndUploadFromStream(System.IAsyncResult asyncResult);
                    bool Exists(Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<bool> ExistsAsync();
                    System.Threading.Tasks.Task<bool> ExistsAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<bool> ExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<bool> ExistsAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void FetchAttributes(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task FetchAttributesAsync();
                    System.Threading.Tasks.Task FetchAttributesAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task FetchAttributesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    Microsoft.Azure.Storage.Shared.Protocol.AccountProperties GetAccountProperties(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync();
                    System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.AccountProperties> GetAccountPropertiesAsync(Microsoft.Azure.Storage.Blob.BlobRequestOptions requestOptions, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy);
                    string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, string groupPolicyIdentifier);
                    string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers);
                    string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers, string groupPolicyIdentifier);
                    string GetSharedAccessSignature(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy policy, Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders headers, string groupPolicyIdentifier, Microsoft.Azure.Storage.SharedAccessProtocol? protocols, Microsoft.Azure.Storage.IPAddressOrRange ipAddressOrRange);
                    bool IsSnapshot { get; }
                    System.Collections.Generic.IDictionary<string, string> Metadata { get; }
                    string Name { get; }
                    System.IO.Stream OpenRead(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync();
                    System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task<System.IO.Stream> OpenReadAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    Microsoft.Azure.Storage.Blob.BlobProperties Properties { get; }
                    void ReleaseLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition);
                    System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task ReleaseLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void RenewLease(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition);
                    System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task RenewLeaseAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    Microsoft.Azure.Storage.Blob.CloudBlobClient ServiceClient { get; }
                    void SetMetadata(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task SetMetadataAsync();
                    System.Threading.Tasks.Task SetMetadataAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task SetMetadataAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task SetMetadataAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void SetProperties(Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task SetPropertiesAsync();
                    System.Threading.Tasks.Task SetPropertiesAsync(System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task SetPropertiesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task SetPropertiesAsync(Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    Microsoft.Azure.Storage.StorageUri SnapshotQualifiedStorageUri { get; }
                    System.Uri SnapshotQualifiedUri { get; }
                    System.DateTimeOffset? SnapshotTime { get; }
                    int StreamMinimumReadSizeInBytes { get; set; }
                    int StreamWriteSizeInBytes { get; set; }
                    void UploadFromByteArray(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count);
                    System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task UploadFromByteArrayAsync(byte[] buffer, int index, int count, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void UploadFromFile(string path, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task UploadFromFileAsync(string path);
                    System.Threading.Tasks.Task UploadFromFileAsync(string path, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task UploadFromFileAsync(string path, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    void UploadFromStream(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    void UploadFromStream(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition = default(Microsoft.Azure.Storage.AccessCondition), Microsoft.Azure.Storage.Blob.BlobRequestOptions options = default(Microsoft.Azure.Storage.Blob.BlobRequestOptions), Microsoft.Azure.Storage.OperationContext operationContext = default(Microsoft.Azure.Storage.OperationContext));
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source);
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length);
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, System.Threading.CancellationToken cancellationToken);
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext);
                    System.Threading.Tasks.Task UploadFromStreamAsync(System.IO.Stream source, long length, Microsoft.Azure.Storage.AccessCondition accessCondition, Microsoft.Azure.Storage.Blob.BlobRequestOptions options, Microsoft.Azure.Storage.OperationContext operationContext, System.Threading.CancellationToken cancellationToken);
                }
                public interface IListBlobItem
                {
                    Microsoft.Azure.Storage.Blob.CloudBlobContainer Container { get; }
                    Microsoft.Azure.Storage.Blob.CloudBlobDirectory Parent { get; }
                    Microsoft.Azure.Storage.StorageUri StorageUri { get; }
                    System.Uri Uri { get; }
                }
                public enum LeaseAction
                {
                    Acquire = 0,
                    Renew = 1,
                    Release = 2,
                    Break = 3,
                    Change = 4,
                }
                public enum LeaseDuration
                {
                    Unspecified = 0,
                    Fixed = 1,
                    Infinite = 2,
                }
                public enum LeaseState
                {
                    Unspecified = 0,
                    Available = 1,
                    Leased = 2,
                    Expired = 3,
                    Breaking = 4,
                    Broken = 5,
                }
                public enum LeaseStatus
                {
                    Unspecified = 0,
                    Locked = 1,
                    Unlocked = 2,
                }
                public sealed class ListBlockItem
                {
                    public bool Committed { get => throw null; }
                    public ListBlockItem() => throw null;
                    public long Length { get => throw null; }
                    public string Name { get => throw null; }
                }
                public sealed class PageDiffRange : Microsoft.Azure.Storage.Blob.PageRange
                {
                    public PageDiffRange(long start, long end, bool isCleared) : base(default(long), default(long)) => throw null;
                    public bool IsClearedPageRange { get => throw null; }
                }
                public class PageRange
                {
                    public PageRange(long start, long end) => throw null;
                    public long EndOffset { get => throw null; }
                    public long StartOffset { get => throw null; }
                    public override string ToString() => throw null;
                }
                public enum PremiumPageBlobTier
                {
                    Unknown = 0,
                    P4 = 1,
                    P6 = 2,
                    P10 = 3,
                    P20 = 4,
                    P30 = 5,
                    P40 = 6,
                    P50 = 7,
                    P60 = 8,
                    P70 = 9,
                    P80 = 10,
                }
                namespace Protocol
                {
                    public sealed class BlobContainerEntry
                    {
                        public System.Collections.Generic.IDictionary<string, string> Metadata { get => throw null; }
                        public string Name { get => throw null; }
                        public Microsoft.Azure.Storage.Blob.BlobContainerProperties Properties { get => throw null; }
                        public System.Uri Uri { get => throw null; }
                    }
                    public static class BlobErrorCodeStrings
                    {
                        public static readonly string BlobAlreadyExists;
                        public static readonly string BlobNotFound;
                        public static readonly string CannotVerifyCopySource;
                        public static readonly string ContainerAlreadyExists;
                        public static readonly string ContainerBeingDeleted;
                        public static readonly string ContainerDisabled;
                        public static readonly string ContainerNotFound;
                        public static readonly string CopyAcrossAccountsNotSupported;
                        public static readonly string CopyIdMismatch;
                        public static readonly string InfiniteLeaseDurationRequired;
                        public static readonly string InvalidAppendCondition;
                        public static readonly string InvalidBlobOrBlock;
                        public static readonly string InvalidBlobType;
                        public static readonly string InvalidBlockId;
                        public static readonly string InvalidBlockList;
                        public static readonly string InvalidMaxBlobSizeCondition;
                        public static readonly string InvalidPageRange;
                        public static readonly string InvalidVersionForPageBlobOperation;
                        public static readonly string LeaseAlreadyBroken;
                        public static readonly string LeaseAlreadyPresent;
                        public static readonly string LeaseIdMismatchWithBlobOperation;
                        public static readonly string LeaseIdMismatchWithContainerOperation;
                        public static readonly string LeaseIdMismatchWithLeaseOperation;
                        public static readonly string LeaseIdMissing;
                        public static readonly string LeaseIsBreakingAndCannotBeAcquired;
                        public static readonly string LeaseIsBreakingAndCannotBeChanged;
                        public static readonly string LeaseIsBrokenAndCannotBeRenewed;
                        public static readonly string LeaseLost;
                        public static readonly string LeaseNotPresentWithBlobOperation;
                        public static readonly string LeaseNotPresentWithContainerOperation;
                        public static readonly string LeaseNotPresentWithLeaseOperation;
                        public static readonly string NoPendingCopyOperation;
                        public static readonly string PendingCopyOperation;
                        public static readonly string SequenceNumberConditionNotMet;
                        public static readonly string SequenceNumberIncrementTooLarge;
                        public static readonly string SnapshotsPresent;
                        public static readonly string SourceConditionNotMet;
                        public static readonly string TargetConditionNotMet;
                    }
                    public static class BlobHttpResponseParsers
                    {
                        public static Microsoft.Azure.Storage.Blob.CopyState GetCopyAttributes(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static bool GetDeletionStatus(string deletedHeader) => throw null;
                        public static bool GetIncrementalCopyStatus(string incrementalCopyHeader) => throw null;
                        public static Microsoft.Azure.Storage.Blob.LeaseDuration GetLeaseDuration(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static string GetLeaseId(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static Microsoft.Azure.Storage.Blob.LeaseState GetLeaseState(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static Microsoft.Azure.Storage.Blob.LeaseStatus GetLeaseStatus(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static System.Collections.Generic.IDictionary<string, string> GetMetadata(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static Microsoft.Azure.Storage.Blob.BlobProperties GetProperties(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static int? GetRemainingLeaseTime(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static bool GetServerEncrypted(string encryptionHeader) => throw null;
                        public static string GetSnapshotTime(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static Microsoft.Azure.Storage.Shared.Protocol.AccountProperties ReadAccountProperties(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceProperties> ReadServicePropertiesAsync(System.IO.Stream inputStream, System.Threading.CancellationToken token) => throw null;
                        public static System.Threading.Tasks.Task<Microsoft.Azure.Storage.Shared.Protocol.ServiceStats> ReadServiceStatsAsync(System.IO.Stream inputStream, System.Threading.CancellationToken token) => throw null;
                    }
                    public sealed class BlobListingContext : Microsoft.Azure.Storage.Shared.Protocol.ListingContext
                    {
                        public BlobListingContext(string prefix, int? maxResults, string delimiter, Microsoft.Azure.Storage.Blob.BlobListingDetails details) : base(default(string), default(int?)) => throw null;
                        public string Delimiter { get => throw null; set { } }
                        public Microsoft.Azure.Storage.Blob.BlobListingDetails Details { get => throw null; set { } }
                    }
                    public static class BlobRequest
                    {
                        public static void WriteBlockListBody(System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.Protocol.PutBlockListItem> blocks, System.IO.Stream outputStream) => throw null;
                        public static void WriteSharedAccessIdentifiers(Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicies sharedAccessPolicies, System.IO.Stream outputStream) => throw null;
                    }
                    public static class BlobResponse
                    {
                    }
                    public static class ContainerHttpResponseParsers
                    {
                        public static Microsoft.Azure.Storage.Blob.BlobContainerPublicAccessType GetAcl(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static System.Collections.Generic.IDictionary<string, string> GetMetadata(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static Microsoft.Azure.Storage.Blob.BlobContainerProperties GetProperties(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static Microsoft.Azure.Storage.Shared.Protocol.AccountProperties ReadAccountProperties(System.Net.Http.HttpResponseMessage response) => throw null;
                        public static System.Threading.Tasks.Task ReadSharedAccessIdentifiersAsync(System.IO.Stream inputStream, Microsoft.Azure.Storage.Blob.BlobContainerPermissions permissions, System.Threading.CancellationToken token) => throw null;
                    }
                    public static class GetBlockListResponse
                    {
                    }
                    public static class GetPageDiffRangesResponse
                    {
                    }
                    public static class GetPageRangesResponse
                    {
                    }
                    public interface IListBlobEntry
                    {
                    }
                    public sealed class ListBlobEntry : Microsoft.Azure.Storage.Blob.Protocol.IListBlobEntry
                    {
                        public Microsoft.Azure.Storage.Blob.CopyState CopyState { get => throw null; }
                        public System.Collections.Generic.IDictionary<string, string> Metadata { get => throw null; }
                        public string Name { get => throw null; }
                        public Microsoft.Azure.Storage.Blob.BlobProperties Properties { get => throw null; }
                        public System.DateTimeOffset? SnapshotTime { get => throw null; }
                        public System.Uri Uri { get => throw null; }
                    }
                    public sealed class ListBlobPrefixEntry : Microsoft.Azure.Storage.Blob.Protocol.IListBlobEntry
                    {
                        public ListBlobPrefixEntry() => throw null;
                        public string Name { get => throw null; }
                    }
                    public sealed class ListBlobsResponse
                    {
                        public System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.Protocol.IListBlobEntry> Blobs { get => throw null; }
                        public string NextMarker { get => throw null; }
                    }
                    public sealed class ListContainersResponse
                    {
                        public System.Collections.Generic.IEnumerable<Microsoft.Azure.Storage.Blob.Protocol.BlobContainerEntry> Containers { get => throw null; }
                        public string NextMarker { get => throw null; }
                    }
                    public enum PageWrite
                    {
                        Update = 0,
                        Clear = 1,
                    }
                    public sealed class PutBlockListItem
                    {
                        public PutBlockListItem(string id, Microsoft.Azure.Storage.Blob.BlockSearchMode searchMode) => throw null;
                        public string Id { get => throw null; }
                        public Microsoft.Azure.Storage.Blob.BlockSearchMode SearchMode { get => throw null; }
                    }
                }
                public enum RehydratePriority
                {
                    Standard = 0,
                    High = 1,
                }
                public enum RehydrationStatus
                {
                    Unknown = 0,
                    PendingToHot = 1,
                    PendingToCool = 2,
                }
                public enum SequenceNumberAction
                {
                    Max = 0,
                    Update = 1,
                    Increment = 2,
                }
                public sealed class SharedAccessBlobHeaders
                {
                    public string CacheControl { get => throw null; set { } }
                    public string ContentDisposition { get => throw null; set { } }
                    public string ContentEncoding { get => throw null; set { } }
                    public string ContentLanguage { get => throw null; set { } }
                    public string ContentType { get => throw null; set { } }
                    public SharedAccessBlobHeaders() => throw null;
                    public SharedAccessBlobHeaders(Microsoft.Azure.Storage.Blob.SharedAccessBlobHeaders sharedAccessBlobHeaders) => throw null;
                }
                [System.Flags]
                public enum SharedAccessBlobPermissions
                {
                    None = 0,
                    Read = 1,
                    Write = 2,
                    Delete = 4,
                    List = 8,
                    Add = 16,
                    Create = 32,
                }
                public sealed class SharedAccessBlobPolicies : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy>>, System.Collections.Generic.IDictionary<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy>>, System.Collections.IEnumerable
                {
                    public void Add(string key, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy value) => throw null;
                    public void Add(System.Collections.Generic.KeyValuePair<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy> item) => throw null;
                    public void Clear() => throw null;
                    public bool Contains(System.Collections.Generic.KeyValuePair<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy> item) => throw null;
                    public bool ContainsKey(string key) => throw null;
                    public void CopyTo(System.Collections.Generic.KeyValuePair<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy>[] array, int arrayIndex) => throw null;
                    public int Count { get => throw null; }
                    public SharedAccessBlobPolicies() => throw null;
                    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy>> GetEnumerator() => throw null;
                    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;
                    public bool IsReadOnly { get => throw null; }
                    public System.Collections.Generic.ICollection<string> Keys { get => throw null; }
                    public bool Remove(string key) => throw null;
                    public bool Remove(System.Collections.Generic.KeyValuePair<string, Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy> item) => throw null;
                    public Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy this[string key] { get => throw null; set { } }
                    public bool TryGetValue(string key, out Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy value) => throw null;
                    public System.Collections.Generic.ICollection<Microsoft.Azure.Storage.Blob.SharedAccessBlobPolicy> Values { get => throw null; }
                }
                public sealed class SharedAccessBlobPolicy
                {
                    public SharedAccessBlobPolicy() => throw null;
                    public Microsoft.Azure.Storage.Blob.SharedAccessBlobPermissions Permissions { get => throw null; set { } }
                    public static Microsoft.Azure.Storage.Blob.SharedAccessBlobPermissions PermissionsFromString(string input) => throw null;
                    public static string PermissionsToString(Microsoft.Azure.Storage.Blob.SharedAccessBlobPermissions permissions) => throw null;
                    public System.DateTimeOffset? SharedAccessExpiryTime { get => throw null; set { } }
                    public System.DateTimeOffset? SharedAccessStartTime { get => throw null; set { } }
                }
                public enum StandardBlobTier
                {
                    Unknown = 0,
                    Hot = 1,
                    Cool = 2,
                    Archive = 3,
                }
            }
        }
    }
}
