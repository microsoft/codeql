// generated by codegen, do not edit
/**
 * This module provides the generated definition of `Item`.
 * INTERNAL: Do not import directly.
 */

private import codeql.rust.elements.internal.generated.Synth
private import codeql.rust.elements.internal.generated.Raw
import codeql.rust.elements.internal.AddressableImpl::Impl as AddressableImpl
import codeql.rust.elements.MacroItems
import codeql.rust.elements.internal.StmtImpl::Impl as StmtImpl

/**
 * INTERNAL: This module contains the fully generated definition of `Item` and should not
 * be referenced directly.
 */
module Generated {
  /**
   * An item such as a function, struct, enum, etc.
   *
   * For example:
   * ```rust
   * fn foo() {}
   * struct S;
   * enum E {}
   * ```
   * INTERNAL: Do not reference the `Generated::Item` class directly.
   * Use the subclass `Item`, where the following predicates are available.
   */
  class Item extends Synth::TItem, StmtImpl::Stmt, AddressableImpl::Addressable {
    /**
     * Gets the attribute macro expansion of this item, if it exists.
     */
    MacroItems getAttributeMacroExpansion() {
      result =
        Synth::convertMacroItemsFromRaw(Synth::convertItemToRaw(this)
              .(Raw::Item)
              .getAttributeMacroExpansion())
    }

    /**
     * Holds if `getAttributeMacroExpansion()` exists.
     */
    final predicate hasAttributeMacroExpansion() { exists(this.getAttributeMacroExpansion()) }
  }
}
